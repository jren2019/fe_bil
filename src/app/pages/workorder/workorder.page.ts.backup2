import { Component } from '@angular/core';
import { NavMenuComponent } from '../../components/nav-menu/nav-menu.component';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { DialogModule } from 'primeng/dialog';
import { TextareaModule } from 'primeng/textarea';
import { DropdownModule } from 'primeng/dropdown';
import { FileUploadModule } from 'primeng/fileupload';
import { CheckboxModule } from 'primeng/checkbox';
import { CalendarModule } from 'primeng/calendar';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

// Filter Components
import { AssignedToFilterComponent } from '../../components/filters/assigned-to-filter.component';
import { DueDateFilterComponent } from '../../components/filters/due-date-filter.component';
import { LocationFilterComponent } from '../../components/filters/location-filter.component';
import { PriorityFilterComponent } from '../../components/filters/priority-filter.component';
import { AddFilterComponent } from '../../components/filters/add-filter.component';

// Filter Types
import {
  AssignedToFilterData,
  DueDateFilterData,
  LocationFilterData,
  PriorityFilterData,
  AddFilterData
} from '../../components/filters/filter.types';

interface WorkOrder {
  id: number;
  title: string;
  status: 'open' | 'in-progress' | 'on-hold' | 'complete';
  priority: 'high' | 'medium' | 'low' | 'none';
  requestedBy: string;
  assignedTo: string;
  dueDate?: Date;
  isOverdue: boolean;
  isUnread: boolean;
  description: string;
  location: string;
  category: string;
  estimatedTime: string;
  workType: 'preventive' | 'corrective' | 'inspection';
  createdAt: Date;
  completedAt?: Date;
}

interface WorkOrderGroup {
  title: string;
  count: number;
  workOrders: WorkOrder[];
  expanded: boolean;
}

type RightPanelMode = 'default' | 'comments' | 'edit' | 'parts' | 'costs';

@Component({
  selector: 'app-workorder-page',
  standalone: true,
  imports: [
    NavMenuComponent,
    ButtonModule,
    InputTextModule,
    DialogModule,
    TextareaModule,
    DropdownModule,
    FileUploadModule,
    CheckboxModule,
    CalendarModule,
    CommonModule,
    FormsModule,
    AssignedToFilterComponent,
    DueDateFilterComponent,
    LocationFilterComponent,
    PriorityFilterComponent,
    AddFilterComponent
  ],
  templateUrl: './workorder.page.html',
  styleUrls: ['./workorder.page.scss']
})
export class WorkorderPageComponent {
  showNewWorkOrderModal = false;
  activeTab: 'todo' | 'done' = 'todo';
  showSortDropdown = false;
  priorityExpanded = false;
  unreadFirstEnabled = false;
  currentSortOption = { value: 'priority-high', label: 'Priority: Highest First' };
  selectedWorkOrderId: number = 1;
  isLoading = false;

  // Right panel state
  rightPanelMode = 'default' as RightPanelMode;
  showActionsMenu = false;
  newComment = '';

  // Costs mode state
  showAddCostModal = false;
  newCost = {
    user: 'Jun Ren',
    cost: '',
    description: '',
    category: 'Labor'
  };

  // Edit form state
  editForm = {
    location: 'general',
    asset: 'test',
    assetStatus: 'online'
  };

  // Filter state
  showAssignedToFilter = false;
  assignedToSearchTerm = '';
  teamsExpanded = true;
  usersExpanded = true;

  // Assigned To filter condition state
  assignedToCondition: 'one-of' | 'none-of' = 'one-of';
  showAssignedToConditionDropdown = false;

  // Due Date filter state
  showDueDateFilter = false;
  dueDateMode: 'presets' | 'custom' = 'presets';
  selectedDate: Date | null = null;
  dueDateCondition: 'one-of' | 'none-of' = 'one-of';
  showDueDateConditionDropdown = false;

  // Location filter state
  showLocationFilter = false;
  locationCondition: 'one-of' | 'none-of' = 'one-of';
  showLocationConditionDropdown = false;
  locationSearchTerm = '';
  selectedLocations: string[] = [];

  // Priority filter state
  showPriorityFilter = false;
  priorityCondition: 'one-of' | 'none-of' = 'one-of';
  showPriorityConditionDropdown = false;

  // Add Filter state
  showAddFilterDialog = false;
  addFilterSearchTerm = '';
  activeFilters: string[] = ['assigned-to', 'due-date', 'location', 'priority']; // Default filters
  addFilterSearchTerm = '';

  // Mock teams and users data
  teams = [
    { id: 1, name: 'Test team', selected: false },
    { id: 2, name: 'Engineering Team', selected: false },
    { id: 3, name: 'Maintenance Team', selected: false }
  ];

  users = [
    { id: 1, name: 'Jun Ren', selected: false },
    { id: 2, name: 'Sarah Chen', selected: false },
    { id: 3, name: 'Mike Torres', selected: false },
    { id: 4, name: 'Alex Johnson', selected: false }
  ];

  // Due date preset options
  dueDatePresets = [
    { id: 'today', label: 'Today', selected: false },
    { id: 'tomorrow', label: 'Tomorrow', selected: false },
    { id: 'next7days', label: 'Next 7 Days', selected: false },
    { id: 'next30days', label: 'Next 30 Days', selected: false },
    { id: 'thismonth', label: 'This Month', selected: false },
    { id: 'overdue', label: 'Overdue', selected: false }
  ];

  // Location hierarchy data
  locations = [
    {
      id: 'general',
      name: 'General',
      expanded: true,
      selected: false,
      children: [
        { id: 'general-x', name: 'x', selected: false },
        { id: 'general-store', name: 'General Store', selected: false },
        { id: 'general-office', name: 'General Office', selected: false }
      ]
    },
    {
      id: 'warehouse',
      name: 'Warehouse',
      expanded: false,
      selected: false,
      children: [
        { id: 'warehouse-a', name: 'Warehouse A', selected: false },
        { id: 'warehouse-b', name: 'Warehouse B', selected: false },
        { id: 'warehouse-storage', name: 'Storage Area', selected: false }
      ]
    },
    {
      id: 'building-a',
      name: 'Building A',
      expanded: false,
      selected: false,
      children: [
        { id: 'building-a-floor1', name: 'Floor 1', selected: false },
        { id: 'building-a-floor2', name: 'Floor 2', selected: false },
        { id: 'building-a-roof', name: 'Roof', selected: false }
      ]
    },
    {
      id: 'building-b',
      name: 'Building B',
      expanded: false,
      selected: false,
      children: [
        { id: 'building-b-lobby', name: 'Lobby', selected: false },
        { id: 'building-b-conference', name: 'Conference Room', selected: false },
        { id: 'building-b-kitchen', name: 'Kitchen', selected: false }
      ]
    }
  ];

  // Priority options data
  priorityOptions = [
    { id: 'none', label: 'None', color: 'none', selected: false },
    { id: 'low', label: 'Low', color: 'green', selected: false },
    { id: 'medium', label: 'Medium', color: 'orange', selected: false },
    { id: 'high', label: 'High', color: 'red', selected: false }
  ];

  // Available filter options for Add Filter dialog
  availableFilters = [
    { id: 'asset', label: 'Asset', icon: 'pi-cube' },
    { id: 'asset-status', label: 'Asset Status', icon: 'pi-info-circle' },
    { id: 'asset-types', label: 'Asset Types', icon: 'pi-th-large' },
    { id: 'completed-by', label: 'Completed By', icon: 'pi-user-check' },
    { id: 'from-request', label: 'From a request', icon: 'pi-send' },
    { id: 'shared-externally', label: 'Shared externally', icon: 'pi-share-alt' },
    { id: 'part', label: 'Part', icon: 'pi-cog' },
    { id: 'parent-sub-work-order', label: 'Parent/Sub-Work Order', icon: 'pi-sitemap' },
    { id: 'procedure', label: 'Procedure', icon: 'pi-list' },
    { id: 'requested-by', label: 'Requested by', icon: 'pi-user-plus' },
    { id: 'shared-exported', label: 'Shared/Exported', icon: 'pi-download' },
    { id: 'status', label: 'Status', icon: 'pi-circle' },
    { id: 'category', label: 'Category', icon: 'pi-tag' },
    { id: 'recurrence', label: 'Recurrence', icon: 'pi-refresh' },
    { id: 'vendor', label: 'Vendor', icon: 'pi-building' },
    { id: 'work-order-template', label: 'Work Order Template', icon: 'pi-clone' },
    { id: 'work-type', label: 'Work Type', icon: 'pi-wrench' },
    { id: 'start-date', label: 'Start Date', icon: 'pi-calendar-plus' }
  ];


  dueDateFilterData: DueDateFilterData = {
    isVisible: false,
    condition: 'one-of',
    showConditionDropdown: false,
    mode: 'presets',
    selectedDate: null,
    presets: this.dueDatePresets.map(p => ({ id: p.id, name: p.label, label: p.label, selected: p.selected }))
  };

  locationFilterData: LocationFilterData = {
    isVisible: false,
    condition: 'one-of',
    showConditionDropdown: false,
    searchTerm: '',
    selectedLocations: [],
    locations: this.locations
  };

  priorityFilterData: PriorityFilterData = {
    isVisible: false,
    condition: 'one-of',
    showConditionDropdown: false,
    priorities: this.priorityOptions.map(p => ({ id: p.id, name: p.id, label: p.label, color: p.color, selected: p.selected }))
  };

  addFilterData: AddFilterData = {
    isVisible: false,
    searchTerm: '',
    activeFilters: this.activeFilters,
    availableFilters: this.availableFilters
  };

  // Mock comments data
  comments = [
    {
      id: 1,
      author: 'Jun Ren',
      timestamp: '8:08 PM',
      message: 'Work order external link activated.',
      avatar: '👤'
    },
    {
      id: 2,
      author: 'Jun Ren',
      timestamp: '05/17/2025, 10:08 AM',
      message: 'Created work order',
      avatar: '👤'
    }
  ];

  // Mock data for work orders
  todoWorkOrders: WorkOrder[] = [
    {
      id: 1,
      title: 'Project 000866',
      status: 'open',
      priority: 'high',
      requestedBy: 'Jun Ren',
      assignedTo: 'Jun Ren',
      dueDate: new Date('2023-05-09'),
      isOverdue: true,
      isUnread: true,
      description: 'dd',
      location: 'General',
      category: 'Electrical',
      estimatedTime: '1h',
      workType: 'preventive',
      createdAt: new Date('2023-05-08')
    },
    {
      id: 2,
      title: 'test',
      status: 'open',
      priority: 'none',
      requestedBy: 'luss',
      assignedTo: 'Jun Ren',
      isOverdue: false,
      isUnread: false,
      description: 'Basic Project 000866',
      location: 'General',
      category: 'Mechanical',
      estimatedTime: '30m',
      workType: 'corrective',
      createdAt: new Date('2023-05-10')
    },
    {
      id: 3,
      title: 'HVAC System Inspection',
      status: 'in-progress',
      priority: 'medium',
      requestedBy: 'Sarah Chen',
      assignedTo: 'Mike Torres',
      dueDate: new Date('2024-01-15'),
      isOverdue: false,
      isUnread: false,
      description: 'Quarterly inspection of main HVAC system',
      location: 'Building A - Roof',
      category: 'HVAC',
      estimatedTime: '2h',
      workType: 'inspection',
      createdAt: new Date('2024-01-10')
    },
    {
      id: 4,
      title: 'Replace Broken Light Fixtures',
      status: 'open',
      priority: 'low',
      requestedBy: 'David Kim',
      assignedTo: 'Jun Ren',
      dueDate: new Date('2024-01-20'),
      isOverdue: false,
      isUnread: true,
      description: 'Replace 3 broken LED fixtures in conference room',
      location: 'Conference Room B',
      category: 'Electrical',
      estimatedTime: '45m',
      workType: 'corrective',
      createdAt: new Date('2024-01-12')
    }
  ];

  doneWorkOrders: WorkOrder[] = [
    {
      id: 5,
      title: 'Monthly Equipment Calibration',
      status: 'complete',
      priority: 'medium',
      requestedBy: 'Jun Ren',
      assignedTo: 'Alex Johnson',
      dueDate: new Date('2024-01-08'),
      isOverdue: false,
      isUnread: false,
      description: 'Calibrate all measurement equipment',
      location: 'Lab Equipment Room',
      category: 'Calibration',
      estimatedTime: '3h',
      workType: 'preventive',
      createdAt: new Date('2024-01-05'),
      completedAt: new Date('2024-01-08')
    },
    {
      id: 6,
      title: 'Fire Extinguisher Inspection',
      status: 'complete',
      priority: 'high',
      requestedBy: 'Safety Team',
      assignedTo: 'Maria Rodriguez',
      dueDate: new Date('2024-01-07'),
      isOverdue: false,
      isUnread: false,
      description: 'Annual fire extinguisher inspection and maintenance',
      location: 'All Floors',
      category: 'Safety',
      estimatedTime: '4h',
      workType: 'inspection',
      createdAt: new Date('2024-01-03'),
      completedAt: new Date('2024-01-07')
    },
    {
      id: 7,
      title: 'Network Equipment Maintenance',
      status: 'complete',
      priority: 'medium',
      requestedBy: 'IT Department',
      assignedTo: 'Tech Team',
      dueDate: new Date('2024-01-06'),
      isOverdue: false,
      isUnread: false,
      description: 'Clean and update network switches and routers',
      location: 'Server Room',
      category: 'IT Equipment',
      estimatedTime: '2h',
      workType: 'preventive',
      createdAt: new Date('2024-01-04'),
      completedAt: new Date('2024-01-06')
    }
  ];

  get todoGroups(): WorkOrderGroup[] {
    const currentUser = 'Jun Ren';
    const assignedToMe = this.todoWorkOrders.filter(wo => wo.assignedTo === currentUser);
    const createdByMe = this.todoWorkOrders.filter(wo => wo.requestedBy === currentUser && wo.assignedTo !== currentUser);

    return [
      {
        title: 'Assigned to Me',
        count: assignedToMe.length,
        workOrders: this.sortWorkOrders(assignedToMe),
        expanded: true
      },
      {
        title: 'Created by Me',
        count: createdByMe.length,
        workOrders: this.sortWorkOrders(createdByMe),
        expanded: true
      }
    ];
  }

  get doneGroups(): WorkOrderGroup[] {
    const currentUser = 'Jun Ren';
    const completedByMe = this.doneWorkOrders.filter(wo => wo.assignedTo === currentUser);
    const completedForMe = this.doneWorkOrders.filter(wo => wo.requestedBy === currentUser && wo.assignedTo !== currentUser);

    return [
      {
        title: 'Completed by Me',
        count: completedByMe.length,
        workOrders: this.sortWorkOrders(completedByMe),
        expanded: true
      },
      {
        title: 'Completed for Me',
        count: completedForMe.length,
        workOrders: this.sortWorkOrders(completedForMe),
        expanded: true
      }
    ];
  }

  get selectedWorkOrder(): WorkOrder | undefined {
    const allWorkOrders = [...this.todoWorkOrders, ...this.doneWorkOrders];
    return allWorkOrders.find(wo => wo.id === this.selectedWorkOrderId);
  }

  get hasTodoWorkOrders(): boolean {
    return this.todoGroups.some(group => group.workOrders.length > 0);
  }

  get hasDoneWorkOrders(): boolean {
    return this.doneGroups.some(group => group.workOrders.length > 0);
  }

  get isCommentsMode(): boolean {
    return this.rightPanelMode === 'comments';
  }

  get isEditMode(): boolean {
    return this.rightPanelMode === 'edit';
  }

  get isPartsMode(): boolean {
    return this.rightPanelMode === 'parts';
  }

  get isDefaultMode(): boolean {
    return this.rightPanelMode === 'default';
  }

  get isCostsMode(): boolean {
    return this.rightPanelMode === 'costs';
  }

  switchTab(tab: 'todo' | 'done') {
    this.isLoading = true;
    // Simulate loading time
    setTimeout(() => {
      this.activeTab = tab;
      this.isLoading = false;
      // Auto-select first work order in new tab
      if (tab === 'todo' && this.todoWorkOrders.length > 0) {
        this.selectedWorkOrderId = this.todoWorkOrders[0].id;
      } else if (tab === 'done' && this.doneWorkOrders.length > 0) {
        this.selectedWorkOrderId = this.doneWorkOrders[0].id;
      }
    }, 300);
  }

  selectWorkOrder(id: number) {
    this.selectedWorkOrderId = id;
  }

  toggleSortDropdown() {
    this.showSortDropdown = !this.showSortDropdown;
    this.priorityExpanded = false;
  }

  closeSortDropdown() {
    this.showSortDropdown = false;
    this.priorityExpanded = false;
  }

  selectSortOption(value: string, label: string) {
    this.currentSortOption = { value, label };
    this.closeSortDropdown();
  }

  togglePriorityExpanded() {
    this.priorityExpanded = !this.priorityExpanded;
    // If expanding and no priority option is selected, select the default (highest first)
    if (this.priorityExpanded && !this.currentSortOption.value.startsWith('priority')) {
      this.selectSortOption('priority-high', 'Priority: Highest First');
    }
  }

  toggleUnreadFirst() {
    this.unreadFirstEnabled = !this.unreadFirstEnabled;
  }

  toggleGroupExpansion(group: WorkOrderGroup) {
    group.expanded = !group.expanded;
  }

  sortWorkOrders(workOrders: WorkOrder[]): WorkOrder[] {
    const sorted = [...workOrders];

    // Apply unread first if enabled
    if (this.unreadFirstEnabled) {
      sorted.sort((a, b) => {
        if (a.isUnread && !b.isUnread) return -1;
        if (!a.isUnread && b.isUnread) return 1;
        return 0;
      });
    }

    // Apply main sorting
    switch (this.currentSortOption.value) {
      case 'priority-high':
        return sorted.sort((a, b) => {
          const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1, 'none': 0 };
          return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
      case 'priority-low':
        return sorted.sort((a, b) => {
          const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1, 'none': 0 };
          return priorityOrder[a.priority] - priorityOrder[b.priority];
        });
      case 'creation':
        return sorted.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
      case 'due':
        return sorted.sort((a, b) => {
          if (!a.dueDate && !b.dueDate) return 0;
          if (!a.dueDate) return 1;
          if (!b.dueDate) return -1;
          return a.dueDate.getTime() - b.dueDate.getTime();
        });
      case 'updated':
        return sorted.sort((a, b) => {
          const aDate = a.completedAt || a.createdAt;
          const bDate = b.completedAt || b.createdAt;
          return bDate.getTime() - aDate.getTime();
        });
      default:
        return sorted;
    }
  }

  getPriorityIcon(priority: string): string {
    switch (priority) {
      case 'high': return '🔴';
      case 'medium': return '🟡';
      case 'low': return '🟢';
      default: return '⚪';
    }
  }

  getStatusIcon(status: string): string {
    switch (status) {
      case 'open': return '🔓';
      case 'in-progress': return '🔄';
      case 'on-hold': return '⏸️';
      case 'complete': return '✅';
      default: return '📋';
    }
  }

  formatDueDate(date: Date | undefined): string {
    if (!date) return '';
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 0) return `${Math.abs(diffDays)} days overdue`;
    if (diffDays === 0) return 'Due today';
    if (diffDays === 1) return 'Due tomorrow';
    return `Due in ${diffDays} days`;
  }

  markAsComplete(workOrderId: number) {
    const workOrder = this.todoWorkOrders.find(wo => wo.id === workOrderId);
    if (workOrder) {
      workOrder.status = 'complete';
      workOrder.completedAt = new Date();
      // Move to done list
      this.doneWorkOrders.unshift(workOrder);
      this.todoWorkOrders = this.todoWorkOrders.filter(wo => wo.id !== workOrderId);
      // Select next work order if available
      if (this.todoWorkOrders.length > 0) {
        this.selectedWorkOrderId = this.todoWorkOrders[0].id;
      }
    }
  }

  reopenWorkOrder(workOrderId: number) {
    const workOrder = this.doneWorkOrders.find(wo => wo.id === workOrderId);
    if (workOrder) {
      workOrder.status = 'open';
      workOrder.completedAt = undefined;
      // Move back to todo list
      this.todoWorkOrders.unshift(workOrder);
      this.doneWorkOrders = this.doneWorkOrders.filter(wo => wo.id !== workOrderId);
      // Switch to todo tab and select the work order
      this.activeTab = 'todo';
      this.selectedWorkOrderId = workOrderId;
    }
  }

  openNewWorkOrderModal() {
    this.showNewWorkOrderModal = true;
  }

  // Right panel methods
  switchToCommentsMode() {
    this.rightPanelMode = 'comments' as RightPanelMode;
  }

  switchToEditMode() {
    this.rightPanelMode = 'edit' as RightPanelMode;
  }

  switchToPartsMode() {
    this.rightPanelMode = 'parts' as RightPanelMode;
  }

  switchToCostsMode() {
    this.rightPanelMode = 'costs' as RightPanelMode;
  }

  goBackToDefault() {
    this.rightPanelMode = 'default' as RightPanelMode;
  }

  toggleActionsMenu() {
    this.showActionsMenu = !this.showActionsMenu;
  }

  closeActionsMenu() {
    this.showActionsMenu = false;
  }

  addComment() {
    if (this.newComment.trim()) {
      const newCommentObj = {
        id: this.comments.length + 1,
        author: 'Jun Ren',
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        message: this.newComment,
        avatar: '👤'
      };
      this.comments.unshift(newCommentObj);
      this.newComment = '';
    }
  }

  handleAction(action: string) {
    console.log('Action selected:', action);
    this.closeActionsMenu();
    // Implement specific actions here
  }

  updateWorkOrder() {
    console.log('Updating work order...');
    this.rightPanelMode = 'default' as RightPanelMode;
  }

  updateParts() {
    console.log('Updating parts...');
    this.rightPanelMode = 'default' as RightPanelMode;
  }

  cancelPartsUpdate() {
    this.rightPanelMode = 'default' as RightPanelMode;
  }

  // Costs modal methods
  openAddCostModal() {
    this.showAddCostModal = true;
  }

  closeAddCostModal() {
    this.showAddCostModal = false;
    // Reset form
    this.newCost = {
      user: 'Jun Ren',
      cost: '',
      description: '',
      category: 'Labor'
    };
  }

  addCost() {
    if (this.newCost.cost.trim()) {
      console.log('Adding cost:', this.newCost);
      // Here you would typically save the cost to your data service
      this.closeAddCostModal();
    }
  }

  // Filter methods
  toggleAssignedToFilter() {
    this.showAssignedToFilter = !this.showAssignedToFilter;
  }

  closeAssignedToFilter() {
    this.showAssignedToFilter = false;
    this.showAssignedToConditionDropdown = false;
  }

  toggleAssignedToConditionDropdown() {
    this.showAssignedToConditionDropdown = !this.showAssignedToConditionDropdown;
  }

  selectAssignedToCondition(condition: 'one-of' | 'none-of') {
    this.assignedToCondition = condition;
    this.showAssignedToConditionDropdown = false;
  }

  getAssignedToConditionLabel(): string {
    return this.assignedToCondition === 'one-of' ? 'One of' : 'None of';
  }

  toggleTeamsExpanded() {
    this.teamsExpanded = !this.teamsExpanded;
  }

  toggleUsersExpanded() {
    this.usersExpanded = !this.usersExpanded;
  }

  toggleTeamSelection(team: any) {
    team.selected = !team.selected;
  }

  toggleUserSelection(user: any) {
    user.selected = !user.selected;
  }

  get filteredTeams() {
    if (!this.assignedToSearchTerm) return this.teams;
    return this.teams.filter(team =>
      team.name.toLowerCase().includes(this.assignedToSearchTerm.toLowerCase())
    );
  }

  get filteredUsers() {
    if (!this.assignedToSearchTerm) return this.users;
    return this.users.filter(user =>
      user.name.toLowerCase().includes(this.assignedToSearchTerm.toLowerCase())
    );
  }

  // Due Date filter methods
  toggleDueDateFilter() {
    this.showDueDateFilter = !this.showDueDateFilter;
    if (this.showDueDateFilter) {
      this.dueDateMode = 'presets'; // Always start with presets
    }
  }

  closeDueDateFilter() {
    this.showDueDateFilter = false;
  }

  switchToCustomDate() {
    this.dueDateMode = 'custom';
  }

  switchToPresets() {
    this.dueDateMode = 'presets';
  }

  togglePresetSelection(preset: any) {
    preset.selected = !preset.selected;
  }

  onDateSelect(date: Date) {
    this.selectedDate = date;
  }

  toggleDueDateConditionDropdown() {
    this.showDueDateConditionDropdown = !this.showDueDateConditionDropdown;
  }

  closeDueDateConditionDropdown() {
    this.showDueDateConditionDropdown = false;
  }

  selectDueDateCondition(condition: 'one-of' | 'none-of') {
    this.dueDateCondition = condition;
    this.showDueDateConditionDropdown = false;
  }

  getDueDateConditionLabel(): string {
    return this.dueDateCondition === 'one-of' ? 'One of' : 'None of';
  }

  // Location filter methods
  toggleLocationFilter() {
    this.showLocationFilter = !this.showLocationFilter;
  }

  closeLocationFilter() {
    this.showLocationFilter = false;
  }

  toggleLocationConditionDropdown() {
    this.showLocationConditionDropdown = !this.showLocationConditionDropdown;
  }

  closeLocationConditionDropdown() {
    this.showLocationConditionDropdown = false;
  }

  selectLocationCondition(condition: 'one-of' | 'none-of') {
    this.locationCondition = condition;
    this.showLocationConditionDropdown = false;
  }

  getLocationConditionLabel(): string {
    return this.locationCondition === 'one-of' ? 'One of' : 'None of';
  }

  toggleLocationExpansion(location: any) {
    location.expanded = !location.expanded;
  }

  toggleLocationSelection(location: any, isChild: boolean = false) {
    location.selected = !location.selected;

    if (location.selected) {
      this.selectedLocations.push(location.name);
    } else {
      this.selectedLocations = this.selectedLocations.filter(name => name !== location.name);
    }
  }

  removeSelectedLocation(locationName: string) {
    this.selectedLocations = this.selectedLocations.filter(name => name !== locationName);

    // Update the location selection state
    this.locations.forEach(location => {
      if (location.name === locationName) {
        location.selected = false;
      }
      location.children?.forEach(child => {
        if (child.name === locationName) {
          child.selected = false;
        }
      });
    });
  }

  get filteredLocations(): any[] {
    if (!this.locationSearchTerm) return this.locations;

    return this.locations.map(location => {
      const filteredChildren = location.children?.filter(child =>
        child.name.toLowerCase().includes(this.locationSearchTerm.toLowerCase())
      );

      const locationMatches = location.name.toLowerCase().includes(this.locationSearchTerm.toLowerCase());

      if (locationMatches || (filteredChildren && filteredChildren.length > 0)) {
        return {
          ...location,
          children: filteredChildren || location.children
        };
      }
      return null;
    }).filter(location => location !== null) as any[];
  }

  // Priority filter methods
  togglePriorityFilter() {
    this.showPriorityFilter = !this.showPriorityFilter;
  }

  closePriorityFilter() {
    this.showPriorityFilter = false;
  }

  togglePriorityConditionDropdown() {
    this.showPriorityConditionDropdown = !this.showPriorityConditionDropdown;
  }

  closePriorityConditionDropdown() {
    this.showPriorityConditionDropdown = false;
  }

  selectPriorityCondition(condition: 'one-of' | 'none-of') {
    this.priorityCondition = condition;
    this.showPriorityConditionDropdown = false;
  }

  getPriorityConditionLabel(): string {
    return this.priorityCondition === 'one-of' ? 'One of' : 'None of';
  }

  togglePrioritySelection(priority: any) {
    priority.selected = !priority.selected;
  }

  // Add Filter methods
  toggleAddFilterDialog() {
    this.showAddFilterDialog = !this.showAddFilterDialog;
  }

  closeAddFilterDialog() {
    this.showAddFilterDialog = false;
  }

  addFilter(filterId: string) {
    if (!this.activeFilters.includes(filterId)) {
      this.activeFilters.push(filterId);
    }
    this.closeAddFilterDialog();
  }

  removeFilter(filterId: string) {
    this.activeFilters = this.activeFilters.filter(id => id !== filterId);
  }

  getFilterLabel(filterId: string): string {
    const filterMap: { [key: string]: string } = {
      'assigned-to': 'Assigned To',
      'due-date': 'Due Date',
      'location': 'Location',
      'priority': 'Priority'
    };

    const additionalFilter = this.availableFilters.find(f => f.id === filterId);
    return filterMap[filterId] || additionalFilter?.label || filterId;
  }

  get filteredAvailableFilters() {
    if (!this.addFilterSearchTerm) {
      return this.availableFilters.filter(filter => !this.activeFilters.includes(filter.id));
    }
    return this.availableFilters.filter(filter =>
      !this.activeFilters.includes(filter.id) &&
      filter.label.toLowerCase().includes(this.addFilterSearchTerm.toLowerCase())
    );
  }

  // Filter event handler methods
  onAssignedToFilterChange(data: AssignedToFilterData) {
    this.assignedToFilterData = { ...data };
  }

  onDueDateFilterChange(data: DueDateFilterData) {
    this.dueDateFilterData = { ...data };
  }

  onLocationFilterChange(data: LocationFilterData) {
    this.locationFilterData = { ...data };
  }

  onPriorityFilterChange(data: PriorityFilterData) {
    this.priorityFilterData = { ...data };
  }

  onAddFilterChange(data: AddFilterData) {
    this.addFilterData = { ...data };
  }

  onFilterToggle(filterType: string, isVisible: boolean) {
    console.log(`Filter ${filterType} toggled: ${isVisible}`);
  }

  onFilterClose(filterType: string) {
    console.log(`Filter ${filterType} closed`);
  }


  dueDateFilterData: DueDateFilterData = {
    isVisible: false,
    condition: 'one-of',
    showConditionDropdown: false,
    mode: 'presets',
    selectedDate: null,
    presets: this.dueDatePresets.map(p => ({ id: p.id, name: p.label, label: p.label, selected: p.selected }))
  };

  locationFilterData: LocationFilterData = {
    isVisible: false,
    condition: 'one-of',
    showConditionDropdown: false,
    searchTerm: '',
    selectedLocations: [],
    locations: this.locations
  };

  priorityFilterData: PriorityFilterData = {
    isVisible: false,
    condition: 'one-of',
    showConditionDropdown: false,
    priorities: this.priorityOptions.map(p => ({ id: p.id, name: p.id, label: p.label, color: p.color, selected: p.selected }))
  };

  addFilterData: AddFilterData = {
    isVisible: false,
    searchTerm: '',
    activeFilters: this.activeFilters,
    availableFilters: this.availableFilters
  };

  // Mock comments data
  comments = [
    {
      id: 1,
      author: 'Jun Ren',
      timestamp: '8:08 PM',
      message: 'Work order external link activated.',
      avatar: '👤'
    },
    {
      id: 2,
      author: 'Jun Ren',
      timestamp: '05/17/2025, 10:08 AM',
      message: 'Created work order',
      avatar: '👤'
    }
  ];

  // All the existing methods...
  get filteredAvailableFilters() {
    if (!this.addFilterSearchTerm) {
      return this.availableFilters.filter(filter => !this.activeFilters.includes(filter.id));
    }
    return this.availableFilters.filter(filter =>
      !this.activeFilters.includes(filter.id) &&
      filter.label.toLowerCase().includes(this.addFilterSearchTerm.toLowerCase())
    );
  }

  addFilter(filterId: string) {
    if (!this.activeFilters.includes(filterId)) {
      this.activeFilters.push(filterId);
      this.addFilterData.activeFilters = [...this.activeFilters];
      this.addFilterData.isVisible = false;
    }
  }

  removeFilter(filterId: string) {
    this.activeFilters = this.activeFilters.filter(id => id !== filterId);
    this.addFilterData.activeFilters = [...this.activeFilters];
  }

  // Filter event handler methods
  onAssignedToFilterChange(data: AssignedToFilterData) {
    this.assignedToFilterData = { ...data };
  }

  onDueDateFilterChange(data: DueDateFilterData) {
    this.dueDateFilterData = { ...data };
  }

  onLocationFilterChange(data: LocationFilterData) {
    this.locationFilterData = { ...data };
  }

  onPriorityFilterChange(data: PriorityFilterData) {
    this.priorityFilterData = { ...data };
  }

  onAddFilterChange(data: AddFilterData) {
    this.addFilterData = { ...data };
  }

  onFilterToggle(filterType: string, isVisible: boolean) {
    console.log(`Filter ${filterType} toggled: ${isVisible}`);
  }

  onFilterClose(filterType: string) {
    console.log(`Filter ${filterType} closed`);
  }
}
